// Requirements
// Your task is to create a ERC20 token and deploy it on the Avalanche network for Degen Gaming. The smart contract should have the following functionality:

// 1. Minting new tokens: The platform should be able to create new tokens and distribute them to players as rewards. Only the owner can mint tokens.
// 2. Transferring tokens: Players should be able to transfer their tokens to others.
// 3. Redeeming tokens: Players should be able to redeem their tokens for items in the in-game store.
// 4. Checking token balance: Players should be able to check their token balance at any time.
// 5. Burning tokens: Anyone should be able to burn tokens, that they own, that are no longer needed.

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "hardhat/console.sol";

contract DegenGamingToken is ERC20, Ownable, ERC20Burnable {

    event RedeemGameTokens(address indexed redeemer, uint256 amount, string item);

    struct ninjafruititems {
        string fruitname;
        uint256 diamonds;
        uint256 availablefruit;
    }

    ninjafruititems[] public fruitItemCategory;

    mapping(address => mapping(uint256 => uint256)) public playerfruitslist;

    mapping(uint256 => uint256) public availableFruitMapping;
    
     function _setFruitItems() internal {
        fruitItemCategory.push(ninjafruititems("1. ninja Apple", 300, 1000));
        fruitItemCategory.push(ninjafruititems("2. ninja Banana", 200, 400));
        fruitItemCategory.push(ninjafruititems("3. ninja grapes", 480, 220));
        fruitItemCategory.push(ninjafruititems("4. ninja orange", 720, 370));
        fruitItemCategory.push(ninjafruititems("5. ninja pineapple", 280, 180));
        fruitItemCategory.push(ninjafruititems("6. ninja mango", 540, 910));
        fruitItemCategory.push(ninjafruititems("7. ninja guvava", 250, 350));
        fruitItemCategory.push(ninjafruititems("8. ninja dragonfruit", 300, 640));

        for (uint256 item = 0; item < fruitItemCategory.length; item++) {
            availableFruitMapping[item] = fruitItemCategory[item].availablefruit;
        }
    }

    constructor() ERC20("Degen", "DGN") Ownable(msg.sender) {
        _setFruitItems();
    }

    function mint(address to, uint256 diamond_value) public onlyOwner {
        _mint(to, diamond_value);
    }

    function transferTokens(address _receiver, uint256 _diamondsToTransfer) external {
        require(balanceOf(msg.sender) >=  _diamondsToTransfer, "You are not having enough Diamonds to transfer to someone");
        transfer(_receiver,  _diamondsToTransfer);
    }

    function burnTokens(uint256 _diamondsToBurn) external {
        require(balanceOf(msg.sender) >= _diamondsToBurn, "You do not have enough Diamonds to burn");
        burn(_diamondsToBurn);
    }

    function getBalance() external view returns (uint256) {
        return balanceOf(msg.sender);
    }


    function redeemfruitItems(uint256 _id) external {
        require( _id <= fruitItemCategory.length && _id > 0, "Fruit item not in list, Invalid id of fruit item");

        ninjafruititems storage Ninjafruititems = fruitItemCategory[_id - 1];

        require(balanceOf(msg.sender) >= Ninjafruititems.diamonds, "You do not have enough Diamonds to get this item! try another fruit item.");

        require(availableFruitMapping[_id - 1] > 0, "Item is unavailable");
        
        _burn(msg.sender, Ninjafruititems.diamonds);
        emit RedeemGameTokens(msg.sender, Ninjafruititems.diamonds, Ninjafruititems.fruitname);

        availableFruitMapping[_id - 1]--;

        playerfruitslist[msg.sender][_id - 1]++;
    }

     function getPlayerFruitItems(address _user) external view returns (uint256[] memory) {
        uint256[] memory playerownedfruits = new uint256[](fruitItemCategory.length);
        for (uint256 item = 0; item < fruitItemCategory.length; item++) {
            playerownedfruits[item] = playerfruitslist[_user][item];
        }
        return playerownedfruits;
    }

    function fruitStore() external view returns (ninjafruititems[] memory) {
        return fruitItemCategory;
    }

}
